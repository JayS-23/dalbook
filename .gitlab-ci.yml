# Dalbook CI Pipeline

stages:
  - build
  - test
  - deploy

variables:
  MAVEN_CLI_OPTS: "-s .m2/settings.xml --batch-mode --errors --fail-at-end --show-version --threads 2"

# Cache dependencies to speed up builds
cache:
  paths:
    - .m2/repository
    - node_modules/

# Commands to be run before each job
before_script:
  - echo "Setting up environment"
  - export PATH=$PATH:/usr/local/maven/bin
  - java -version
  - mvn -version

# Backend build stage
build-backend:
  stage: build
  image: maven:3.9.8-openjdk-22  # Docker image to use for the job
  tags:
    - ugrad  # Tags to identify runners
  script:
    - echo "Building backend"
    - cd backend
    - mvn $MAVEN_CLI_OPTS clean package -DskipTests  # Clean and package the application, skipping tests
  artifacts:
    paths:
      - server/target/*.jar  # Store the generated JAR file as an artifact
  only:
    - main

# Frontend build stage
build-frontend:
  stage: build  # Specify the stage this job belongs to
  image: node:22.4.0  # Docker image to use for the job
  tags:
    - ugrad  # Tags to identify runners
  script:
    - echo "Building frontend"
    - cd frontend
    - npm install -g npm@10.8.1
    - npm install                # Install Node.js dependencies
    - npm run build              # Build the application
  artifacts:
    paths:
      - frontend/build  # Store the build output as an artifact
  only:
    - main

# Backend test stage
test-backend:
  stage: test
  image: maven:3.9.8-openjdk-22  # Docker image to use for the job
  tags:
    - ugrad # Tags to identify runners
  script:
    - echo "Running backend tests"
    - cd backend
    - mvn $MAVEN_CLI_OPTS clean verify  # Clean and run tests (unit and integration)
  artifacts:
    reports:
      junit:
        - target/surefire-reports/TEST-*.xml  # Store JUnit test reports from unit tests
        - target/failsafe-reports/TEST-*.xml  # Store JUnit test reports from integration tests
  only:
    - main

# Frontend test stage
test-frontend:
  stage: test
  image: node:22.4.0  # Docker image to use for the job
  tags:
    - ugrad  # Tags to identify runners
  script:
    - echo "Running frontend tests"
    - cd frontend
    - npm install -g npm@10.8.1
    - npm install
    - npm test
  only:
    - main

# Backend deploy stage
deploy-backend:
  stage: deploy
  image: maven:3.9.8-openjdk-22
  tags:
    - ugrad  # Tags to identify runners
  script:
    - echo "Deploying backend"
    - mvn $MAVEN_CLI_OPTS deploy
  environment:
    name: production
  only:
    - main

# Frontend deploy stage
deploy-frontend:
  stage: deploy
  image: node:22.4.0
  tags:
    - ugrad  # Tags to identify runners
  script:
    - echo "Deploying frontend"
    - cd frontend
    - npm install -g npm@10.8.1
    - npm install
    - npm run deploy
  environment:
    name: production
  only:
    - main
