{"ast":null,"code":"import axios from \"axios\";\nimport React, { useState, useEffect } from \"react\";\nconst API_URL = \"http://localhost:8085/api/friends\";\nconst sendFriendRequest = async (senderId, receiverEmail) => {\n  try {\n    const response = await axios.post(`${API_URL}/send`, null, {\n      params: {\n        senderId,\n        receiverEmail\n      }\n    });\n    console.log('Friend request sent successfully:', response.data);\n    return response.data;\n  } catch (error) {\n    if (error.response) {\n      const {\n        timestamp,\n        message,\n        details\n      } = error.response.data;\n      console.error('Error details:', timestamp, message, details);\n\n      // Handle different error scenarios based on `message`\n      if (message === \"Friend request already sent\") {\n        alert(message);\n      } else if (message === \"Already friends\") {\n        alert(message);\n      } else {\n        alert(message);\n      }\n    } else {\n      // Handle cases where error.response is undefined\n      console.error('Error:', error.message);\n      alert('Failed to send friend request due to a network error');\n    }\n  }\n};\nconst acceptFriendRequest = requestId => {\n  return axios.post(`${API_URL}/accept`, null, {\n    params: {\n      requestId\n    }\n  });\n};\nconst getPendingRequests = userId => {\n  return axios.get(`${API_URL}/pending`, {\n    params: {\n      userId\n    }\n  });\n};\nconst getFriends = userId => {\n  return axios.get(`${API_URL}/list`, {\n    params: {\n      userId\n    }\n  });\n};\nexport default {\n  sendFriendRequest,\n  acceptFriendRequest,\n  getPendingRequests,\n  getFriends\n};","map":{"version":3,"names":["axios","React","useState","useEffect","API_URL","sendFriendRequest","senderId","receiverEmail","response","post","params","console","log","data","error","timestamp","message","details","alert","acceptFriendRequest","requestId","getPendingRequests","userId","get","getFriends"],"sources":["/Users/jacobdomingo/Group19/frontend/src/services/FriendService.js"],"sourcesContent":["import axios from \"axios\";\nimport React, { useState, useEffect } from \"react\";\n\n\nconst API_URL = \"http://localhost:8085/api/friends\";\n\nconst sendFriendRequest = async (senderId, receiverEmail) => {  \n  try {\n    const response = await axios.post(`${API_URL}/send`, null, {\n      params: { senderId, receiverEmail },\n    });\n    console.log('Friend request sent successfully:', response.data);\n    return response.data;\n\n  } catch (error) {\n    if (error.response) {\n      const { timestamp, message, details } = error.response.data;\n      console.error('Error details:', timestamp, message, details);\n\n      // Handle different error scenarios based on `message`\n      if (message === \"Friend request already sent\") {\n        alert(message);\n      } \n      else if (message === \"Already friends\") {\n        alert(message);\n      } \n      else {\n        alert(message);\n      }\n    } \n    else {\n      // Handle cases where error.response is undefined\n      console.error('Error:', error.message);\n      alert('Failed to send friend request due to a network error');\n    }\n  }\n};\n\nconst acceptFriendRequest = (requestId) => {\n  return axios.post(`${API_URL}/accept`, null, { params: { requestId } });\n};\n\nconst getPendingRequests = (userId) => {\n  return axios.get(`${API_URL}/pending`, { params: { userId } });\n};\n\nconst getFriends = (userId) => {\n  return axios.get(`${API_URL}/list`, { params: { userId } });\n};\n\nexport default {\n  sendFriendRequest,\n  acceptFriendRequest,\n  getPendingRequests,\n  getFriends,\n};\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAGlD,MAAMC,OAAO,GAAG,mCAAmC;AAEnD,MAAMC,iBAAiB,GAAG,MAAAA,CAAOC,QAAQ,EAAEC,aAAa,KAAK;EAC3D,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAMR,KAAK,CAACS,IAAI,CAAC,GAAGL,OAAO,OAAO,EAAE,IAAI,EAAE;MACzDM,MAAM,EAAE;QAAEJ,QAAQ;QAAEC;MAAc;IACpC,CAAC,CAAC;IACFI,OAAO,CAACC,GAAG,CAAC,mCAAmC,EAAEJ,QAAQ,CAACK,IAAI,CAAC;IAC/D,OAAOL,QAAQ,CAACK,IAAI;EAEtB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACd,IAAIA,KAAK,CAACN,QAAQ,EAAE;MAClB,MAAM;QAAEO,SAAS;QAAEC,OAAO;QAAEC;MAAQ,CAAC,GAAGH,KAAK,CAACN,QAAQ,CAACK,IAAI;MAC3DF,OAAO,CAACG,KAAK,CAAC,gBAAgB,EAAEC,SAAS,EAAEC,OAAO,EAAEC,OAAO,CAAC;;MAE5D;MACA,IAAID,OAAO,KAAK,6BAA6B,EAAE;QAC7CE,KAAK,CAACF,OAAO,CAAC;MAChB,CAAC,MACI,IAAIA,OAAO,KAAK,iBAAiB,EAAE;QACtCE,KAAK,CAACF,OAAO,CAAC;MAChB,CAAC,MACI;QACHE,KAAK,CAACF,OAAO,CAAC;MAChB;IACF,CAAC,MACI;MACH;MACAL,OAAO,CAACG,KAAK,CAAC,QAAQ,EAAEA,KAAK,CAACE,OAAO,CAAC;MACtCE,KAAK,CAAC,sDAAsD,CAAC;IAC/D;EACF;AACF,CAAC;AAED,MAAMC,mBAAmB,GAAIC,SAAS,IAAK;EACzC,OAAOpB,KAAK,CAACS,IAAI,CAAC,GAAGL,OAAO,SAAS,EAAE,IAAI,EAAE;IAAEM,MAAM,EAAE;MAAEU;IAAU;EAAE,CAAC,CAAC;AACzE,CAAC;AAED,MAAMC,kBAAkB,GAAIC,MAAM,IAAK;EACrC,OAAOtB,KAAK,CAACuB,GAAG,CAAC,GAAGnB,OAAO,UAAU,EAAE;IAAEM,MAAM,EAAE;MAAEY;IAAO;EAAE,CAAC,CAAC;AAChE,CAAC;AAED,MAAME,UAAU,GAAIF,MAAM,IAAK;EAC7B,OAAOtB,KAAK,CAACuB,GAAG,CAAC,GAAGnB,OAAO,OAAO,EAAE;IAAEM,MAAM,EAAE;MAAEY;IAAO;EAAE,CAAC,CAAC;AAC7D,CAAC;AAED,eAAe;EACbjB,iBAAiB;EACjBc,mBAAmB;EACnBE,kBAAkB;EAClBG;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}