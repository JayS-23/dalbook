{"ast":null,"code":"var _jsxFileName = \"/Users/jacobdomingo/Group19/frontend/src/components/password/ResetPassword.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport \"./Forgot.css\";\nimport { validateEmail, validatePassword } from \"./SignupValidation\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function ResetPassword() {\n  _s();\n  const [email, setEmail] = useState(\"\");\n  const [newPassword, setNewPassword] = useState(\"\");\n  const [errorMessage, setErrorMessage] = useState(null);\n  const [error, setError] = useState({});\n  const navigate = useNavigate();\n  const handleChangePassword = async e => {\n    e.preventDefault();\n    let validationErrors = {};\n    console.log(\"Changing password...\");\n\n    // Perform login action with email and password\n    if (!email || !validateEmail(email)) {\n      validationErrors.email = \"Invalid email. Only @dal.ca addresses are accepted.\";\n    }\n    const passwordErrors = validatePassword(password);\n    if (passwordErrors.length > 0) {\n      validationErrors.password = passwordErrors;\n    }\n    if (Object.keys(validationErrors).length > 0) {\n      setErrors(validationErrors);\n      return;\n    }\n    const updatedUser = {\n      email: email,\n      newPassword: newPassword\n    };\n    try {\n      const response = await fetch(`http://localhost:8085/api/user/reset-password`, {\n        method: \"PUT\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify(updatedUser)\n      });\n      if (!response.ok) {\n        throw new Error(\"Failed to update password\");\n      }\n      console.log(\"Password updated successfully\");\n      alert(\"Password updated successfully\");\n      setEmail(\"\");\n      setNewPassword(\"\");\n      setErrorMessage(null);\n      navigate(\"/login\"); // Redirect to Login Page\n    } catch (error) {\n      console.error(\"Error updating password:\", error);\n      setErrorMessage(\"Failed to update password\");\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"paper\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"subtitle\",\n        children: \"Reset Password\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n        className: \"form\",\n        onSubmit: handleChangePassword,\n        noValidate: true,\n        autoComplete: \"off\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"email\",\n          placeholder: \"Email\",\n          className: \"input\",\n          value: email,\n          onChange: e => setEmail(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"password\",\n          placeholder: \"New Password\",\n          className: \"input\",\n          value: newPassword,\n          onChange: e => setNewPassword(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 11\n        }, this), errors.password && /*#__PURE__*/_jsxDEV(\"ul\", {\n          className: \"text-danger\",\n          children: errors.password.map((error, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n            children: error\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 94,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          className: \"button\",\n          children: \"Reset Password\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 11\n        }, this), errorMessage && /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"error\",\n          children: errorMessage\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 28\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 68,\n    columnNumber: 5\n  }, this);\n}\n_s(ResetPassword, \"auunbzAxk4pDp1HYshARA2FbxXc=\", false, function () {\n  return [useNavigate];\n});\n_c = ResetPassword;\nvar _c;\n$RefreshReg$(_c, \"ResetPassword\");","map":{"version":3,"names":["React","useState","useNavigate","validateEmail","validatePassword","jsxDEV","_jsxDEV","ResetPassword","_s","email","setEmail","newPassword","setNewPassword","errorMessage","setErrorMessage","error","setError","navigate","handleChangePassword","e","preventDefault","validationErrors","console","log","passwordErrors","password","length","Object","keys","setErrors","updatedUser","response","fetch","method","headers","body","JSON","stringify","ok","Error","alert","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","noValidate","autoComplete","type","placeholder","value","onChange","target","errors","map","index","_c","$RefreshReg$"],"sources":["/Users/jacobdomingo/Group19/frontend/src/components/password/ResetPassword.js"],"sourcesContent":["import React, { useState } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport \"./Forgot.css\";\nimport { validateEmail, validatePassword } from \"./SignupValidation\";\n\nexport default function ResetPassword() {\n  const [email, setEmail] = useState(\"\");\n  const [newPassword, setNewPassword] = useState(\"\");\n  const [errorMessage, setErrorMessage] = useState(null);\n  const [error, setError] = useState({});\n  const navigate = useNavigate();\n\n  const handleChangePassword = async (e) => {\n    e.preventDefault();\n    let validationErrors = {};\n    console.log(\"Changing password...\");\n\n    // Perform login action with email and password\n    if (!email || !validateEmail(email)) {\n      validationErrors.email =\n        \"Invalid email. Only @dal.ca addresses are accepted.\";\n    }\n\n    const passwordErrors = validatePassword(password);\n    if (passwordErrors.length > 0) {\n      validationErrors.password = passwordErrors;\n    }\n\n    if (Object.keys(validationErrors).length > 0) {\n      setErrors(validationErrors);\n      return;\n    }\n\n    const updatedUser = {\n      email: email,\n      newPassword: newPassword,\n    };\n\n    try {\n      const response = await fetch(\n        `http://localhost:8085/api/user/reset-password`,\n        {\n          method: \"PUT\",\n          headers: {\n            \"Content-Type\": \"application/json\",\n          },\n          body: JSON.stringify(updatedUser),\n        }\n      );\n\n      if (!response.ok) {\n        throw new Error(\"Failed to update password\");\n      }\n\n      console.log(\"Password updated successfully\");\n      alert(\"Password updated successfully\");\n      setEmail(\"\");\n      setNewPassword(\"\");\n      setErrorMessage(null);\n      navigate(\"/login\"); // Redirect to Login Page\n    } catch (error) {\n      console.error(\"Error updating password:\", error);\n      setErrorMessage(\"Failed to update password\");\n    }\n  };\n\n  return (\n    <div className=\"container\">\n      <div className=\"paper\">\n        <h2 className=\"subtitle\">Reset Password</h2>\n        <form\n          className=\"form\"\n          onSubmit={handleChangePassword}\n          noValidate\n          autoComplete=\"off\"\n        >\n          <input\n            type=\"email\"\n            placeholder=\"Email\"\n            className=\"input\"\n            value={email}\n            onChange={(e) => setEmail(e.target.value)}\n          />\n          <input\n            type=\"password\"\n            placeholder=\"New Password\"\n            className=\"input\"\n            value={newPassword}\n            onChange={(e) => setNewPassword(e.target.value)}\n          />\n          {errors.password && (\n            <ul className=\"text-danger\">\n              {errors.password.map((error, index) => (\n                <li key={index}>{error}</li>\n              ))}\n            </ul>\n          )}\n          <button type=\"submit\" className=\"button\">\n            Reset Password\n          </button>\n          {errorMessage && <p className=\"error\">{errorMessage}</p>}\n        </form>\n      </div>\n    </div>\n  );\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}